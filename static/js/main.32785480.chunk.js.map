{"version":3,"sources":["Solver/Stack.js","Solver/Glass.js","components/Ball/Ball.js","components/TestTube/TestTube.js","components/TestTubes/TestTubes.js","components/Template/Template.js","components/Sidebar/Sidebar.js","components/Button/Button.js","components/Configurator/Configurator.js","Solver/Move.js","components/Solution/Solution.js","Solver/Board.js","Solver/DFS.js","Solver/Solver.js","Solver/AbstractGraphNode.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Node","value","this","next","autoBind","Stack","internalSize","node","setNext","getValue","getNext","Glass","capacity","stack","isEmpty","size","top","pop","ball","isFull","Error","push","balls","getAllBalls","i","length","forEach","reverse","pushArrayOfBalls","newGlass","join","Ball","props","color","onClick","className","style","backgroundColor","role","tabIndex","onKeyPress","key","defaultProps","TestTube","glass","active","createKey","index","map","TestTubes","glasses","activeGlass","onTestTubeClick","toString","Template","testTubes","children","Sidebar","Button","disabled","text","type","Configurator","colors","onClear","onAdd","onRemove","onColorClick","onSolve","Toolbox","Move","from","to","SolutionNavigator","currentMove","numberOfMoves","onNext","onPrevious","onRestart","Solution","moves","moveIndex","Board","numberOfColors","internalCalculateNumberOfColors","glassIndex","internalGetGlass","hasOnlySingleColorBalls","filter","_","isGlassComplete","toGlass","toIndex","internalFindAllGlassIndexesThatCanMoveToGlass","fromIndex","move","ballToMove","clone","str","numberOfGlasses","Set","add","fromGlass","DFS","startNode","visited","getHash","getNeighbors","neighbor","neighborHash","has","GraphNode","board","previousMove","previousNode","glassStrings","getGlasses","sort","calculateAllPotentialMoves","newBoard","moveBall","getMovesToNode","Solver","dfs","isDone","currentNode","getBoard","isComplete","isSolvable","iterate","Object","values","RED","BLUE","PURPLE","YELLOW","GREEN","PINK","AQUA","GREY","BABY","ORANGE","createGlass","arr","idx","COMPLEX_BOARD","cloneGlasses","App","useState","setActiveGlass","stage","setStage","setMoves","setMoveIndex","solutionGlasses","setSolutionGlasses","setGlasses","clonedGlasses","splice","clearGlass","addGlass","removeGlass","Math","max","addBallToGlass","report","invert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32785480.chunk.js","sourcesContent":["/* eslint-disable max-classes-per-file */\nimport autoBind from \"auto-bind\";\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n    autoBind(this);\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  getNext() {\n    return this.next;\n  }\n\n  setNext(next) {\n    this.next = next;\n    return this;\n  }\n}\n\nclass Stack {\n  constructor() {\n    this.next = null;\n    this.internalSize = 0;\n    autoBind(this);\n  }\n\n  push(value) {\n    const node = new Node(value);\n    node.setNext(this.next);\n    this.next = node;\n    this.internalSize += 1;\n  }\n\n  top() {\n    // assert(this.next !== null);\n    return this.next.getValue();\n  }\n\n  pop() {\n    // assert(this.next !== null);\n    const { next } = this;\n    this.next = next.getNext();\n    this.internalSize -= 1;\n    return next.getValue();\n  }\n\n  isEmpty() {\n    return this.next === null;\n  }\n\n  size() {\n    return this.internalSize;\n  }\n}\n\nexport default Stack;\n","import autoBind from \"auto-bind\";\nimport Stack from \"./Stack\";\n\nclass Glass {\n  constructor() {\n    this.capacity = 4;\n    this.stack = new Stack();\n    autoBind(this);\n  }\n\n  getCapacity() {\n    return this.capacity;\n  }\n\n  isEmpty() {\n    return this.stack.isEmpty();\n  }\n\n  isFull() {\n    return this.stack.size() === this.capacity;\n  }\n\n  top() {\n    return this.stack.top();\n  }\n\n  pop() {\n    return this.stack.pop();\n  }\n\n  push(ball) {\n    if (this.isFull()) {\n      throw Error(\"Can't push to a full glass\");\n    }\n    this.stack.push(ball);\n  }\n\n  hasOnlySingleColorBalls() {\n    const balls = this.getAllBalls();\n    for (let i = 1; i < balls.length; i += 1) {\n      if (balls[i - 1] !== balls[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  pushArrayOfBalls(balls) {\n    const isExeedingCapacity = balls.length + this.stack.size() > this.capacity;\n    if (isExeedingCapacity) {\n      throw Error(\"pushArrayOfBalls can't exceed glass capacity\");\n    }\n    balls.forEach(this.push);\n  }\n\n  getAllBalls() {\n    const balls = [];\n    while (!this.isEmpty()) {\n      balls.push(this.pop());\n    }\n    balls.reverse();\n    this.pushArrayOfBalls(balls);\n    return balls;\n  }\n\n  clone() {\n    const newGlass = new Glass(this.capacity);\n    newGlass.pushArrayOfBalls(this.getAllBalls());\n    return newGlass;\n  }\n\n  toString() {\n    return this.getAllBalls().join(\",\");\n  }\n}\n\nexport default Glass;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Ball.css\";\n\nfunction Ball(props) {\n  const { color, onClick } = props;\n  return (\n    <div\n      className=\"Ball\"\n      onClick={() => onClick()}\n      style={{ backgroundColor: color }}\n      role=\"button\"\n      tabIndex={0}\n      onKeyPress={({ key }) => {\n        if (key === \"Enter\") {\n          onClick();\n        }\n      }}\n    />\n  );\n}\n\nBall.propTypes = {\n  color: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\n\nBall.defaultProps = {\n  onClick: () => {},\n};\n\nexport default Ball;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Glass from \"../../Solver/Glass\";\nimport Ball from \"../Ball/Ball\";\nimport \"./TestTube.css\";\n\nfunction TestTube(props) {\n  const { glass, active, onClick } = props;\n  const balls = glass.getAllBalls();\n  const createKey = (color, index) => `${index}:${color}`;\n  return (\n    <div\n      className={`TestTube ${active ? \"active\" : \"\"}`}\n      onClick={() => onClick()}\n      role=\"button\"\n      tabIndex={0}\n      onKeyPress={({ key }) => {\n        if (key === \"Enter\") {\n          onClick();\n        }\n      }}\n    >\n      <div className=\"BallWrapper\">\n        {balls.map((color, index) => (\n          <Ball key={createKey(color, index)} color={color} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nTestTube.propTypes = {\n  glass: PropTypes.instanceOf(Glass).isRequired,\n  active: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nTestTube.defaultProps = {\n  active: false,\n  onClick: () => {},\n};\n\nexport default TestTube;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Glass from \"../../Solver/Glass\";\nimport TestTube from \"../TestTube/TestTube\";\nimport \"./TestTubes.css\";\n\nfunction TestTubes(props) {\n  const { glasses, activeGlass, onTestTubeClick } = props;\n  const createKey = (glass, index) => `${index}:${glass.toString()}`;\n  return (\n    <div className=\"TestTubes\">\n      {glasses.map((glass, index) => (\n        <div key={createKey(glass, index)} className=\"TestTubeWrapper\">\n          <TestTube\n            glass={glass}\n            active={index === activeGlass}\n            onClick={() => onTestTubeClick(index)}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nTestTubes.propTypes = {\n  glasses: PropTypes.arrayOf(PropTypes.instanceOf(Glass)).isRequired,\n  activeGlass: PropTypes.number,\n  onTestTubeClick: PropTypes.func,\n};\n\nTestTubes.defaultProps = {\n  activeGlass: -1,\n  onTestTubeClick: () => {},\n};\n\nexport default TestTubes;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Template.css\";\n\nfunction Template(props) {\n  const { testTubes, children } = props;\n  return (\n    <div className=\"Template\">\n      <div className=\"TestTubesWrapper\">{testTubes}</div>\n      <div className=\"SidepanelWrapper\">{children}</div>\n    </div>\n  );\n}\n\nTemplate.propTypes = {\n  testTubes: PropTypes.node.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Template;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Sidebar.css\";\n\nfunction Sidebar(props) {\n  const { children } = props;\n  return <div className=\"Sidebar\">{children}</div>;\n}\n\nSidebar.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\n\nfunction Button(props) {\n  // https://codepen.io/YusukeNakaya/pen/vYYzbGW\n  const { disabled, onClick, text } = props;\n  return (\n    <button\n      type=\"button\"\n      className=\"Button\"\n      disabled={disabled}\n      onClick={() => onClick()}\n    >\n      <span>{text}</span>\n    </button>\n  );\n}\n\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  disabled: false,\n  onClick: () => {},\n};\n\nexport default Button;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Glass from \"../../Solver/Glass\";\nimport TestTubes from \"../TestTubes/TestTubes\";\nimport Template from \"../Template/Template\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Ball from \"../Ball/Ball\";\nimport Button from \"../Button/Button\";\nimport \"./Configurator.css\";\n\nfunction Configurator(props) {\n  const {\n    glasses,\n    colors,\n    activeGlass,\n    onTestTubeClick,\n    onClear,\n    onAdd,\n    onRemove,\n    onColorClick,\n    onSolve,\n  } = props;\n  return (\n    <Template\n      testTubes={\n        <TestTubes\n          glasses={glasses}\n          activeGlass={activeGlass}\n          onTestTubeClick={(index) => onTestTubeClick(index)}\n        />\n      }\n    >\n      <Toolbox\n        colors={colors}\n        onClear={() => onClear()}\n        onAdd={() => onAdd()}\n        onRemove={() => onRemove()}\n        onColorClick={(color) => onColorClick(color)}\n        onSolve={() => onSolve()}\n      />\n    </Template>\n  );\n}\n\nConfigurator.propTypes = {\n  glasses: PropTypes.arrayOf(PropTypes.instanceOf(Glass)).isRequired,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  activeGlass: PropTypes.number.isRequired,\n  onTestTubeClick: PropTypes.func,\n  onClear: PropTypes.func,\n  onAdd: PropTypes.func,\n  onRemove: PropTypes.func,\n  onColorClick: PropTypes.func,\n  onSolve: PropTypes.func,\n};\n\nConfigurator.defaultProps = {\n  onTestTubeClick: () => {},\n  onClear: () => {},\n  onAdd: () => {},\n  onRemove: () => {},\n  onColorClick: () => {},\n  onSolve: () => {},\n};\n\nfunction Toolbox(props) {\n  const { colors, onColorClick, onAdd, onClear, onRemove, onSolve } = props;\n  return (\n    <Sidebar>\n      <div className=\"BallWrapper\">\n        {colors.map((color) => (\n          <div key={color} className=\"SingleBallWrapper\">\n            <Ball color={color} onClick={() => onColorClick(color)} />\n          </div>\n        ))}\n      </div>\n      <Button text=\"CLEAR\" onClick={() => onClear()} />\n      <Button text=\"ADD\" onClick={() => onAdd()} />\n      <Button text=\"REMOVE\" onClick={() => onRemove()} />\n      <Button text=\"SOLVE\" onClick={() => onSolve()} />\n    </Sidebar>\n  );\n}\n\nToolbox.propTypes = {\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onColorClick: PropTypes.func,\n  onAdd: PropTypes.func,\n  onClear: PropTypes.func,\n  onRemove: PropTypes.func,\n  onSolve: PropTypes.func,\n};\n\nToolbox.defaultProps = {\n  onColorClick: () => {},\n  onAdd: () => {},\n  onClear: () => {},\n  onRemove: () => {},\n  onSolve: () => {},\n};\n\nexport default Configurator;\n","class Move {\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n  }\n\n  invert() {\n    return new Move(this.to, this.from);\n  }\n}\n\nexport default Move;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Glass from \"../../Solver/Glass\";\nimport Move from \"../../Solver/Move\";\nimport TestTubes from \"../TestTubes/TestTubes\";\nimport Template from \"../Template/Template\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Button from \"../Button/Button\";\n\nfunction Solution(props) {\n  const { glasses, moves, moveIndex, onNext, onPrevious, onRestart } = props;\n  return (\n    <Template testTubes={<TestTubes glasses={glasses} />}>\n      <SolutionNavigator\n        currentMove={moveIndex}\n        numberOfMoves={moves.length}\n        onNext={() => onNext()}\n        onPrevious={() => onPrevious()}\n        onRestart={() => onRestart()}\n      />\n    </Template>\n  );\n}\n\nSolution.propTypes = {\n  glasses: PropTypes.arrayOf(PropTypes.instanceOf(Glass)).isRequired,\n  moves: PropTypes.arrayOf(PropTypes.instanceOf(Move)).isRequired,\n  moveIndex: PropTypes.number.isRequired,\n  onNext: PropTypes.func.isRequired,\n  onPrevious: PropTypes.func.isRequired,\n  onRestart: PropTypes.func.isRequired,\n};\n\nfunction SolutionNavigator(props) {\n  const { currentMove, numberOfMoves, onNext, onPrevious, onRestart } = props;\n  return (\n    <Sidebar>\n      <p>\n        {currentMove} / {numberOfMoves}\n      </p>\n      <Button\n        text=\"Next\"\n        disabled={currentMove >= numberOfMoves}\n        onClick={() => onNext()}\n      />\n      <Button\n        text=\"Previous\"\n        disabled={currentMove <= 0}\n        onClick={() => onPrevious()}\n      />\n      <Button text=\"Restart\" onClick={() => onRestart()} />\n    </Sidebar>\n  );\n}\n\nSolutionNavigator.propTypes = {\n  currentMove: PropTypes.number.isRequired,\n  numberOfMoves: PropTypes.number.isRequired,\n  onNext: PropTypes.func.isRequired,\n  onPrevious: PropTypes.func.isRequired,\n  onRestart: PropTypes.func.isRequired,\n};\n\nexport default Solution;\n","import autoBind from \"auto-bind\";\nimport Move from \"./Move\";\n\nclass Board {\n  constructor(glasses) {\n    this.glasses = glasses;\n    this.numberOfColors = this.internalCalculateNumberOfColors();\n    autoBind(this);\n  }\n\n  isGlassComplete(glassIndex) {\n    const glass = this.internalGetGlass(glassIndex);\n    return glass.isFull() && glass.hasOnlySingleColorBalls();\n  }\n\n  isComplete() {\n    const completedGlasses = this.glasses.filter((_, index) =>\n      this.isGlassComplete(index)\n    );\n    return completedGlasses.length === this.numberOfColors;\n  }\n\n  calculateAllPotentialMoves() {\n    const moves = [];\n    this.glasses.forEach((toGlass, toIndex) => {\n      if (toGlass.isFull()) {\n        return;\n      }\n      const fromIndexes = this.internalFindAllGlassIndexesThatCanMoveToGlass(\n        toIndex\n      );\n      fromIndexes.forEach((fromIndex) => {\n        moves.push(new Move(fromIndex, toIndex));\n      });\n    });\n    return moves;\n  }\n\n  moveBall(move) {\n    const ballToMove = this.internalGetGlass(move.from).pop();\n    this.internalGetGlass(move.to).push(ballToMove);\n  }\n\n  getGlasses() {\n    return this.glasses;\n  }\n\n  clone() {\n    const newGlasses = this.glasses.map((glass) => glass.clone());\n    return new Board(newGlasses);\n  }\n\n  toString() {\n    let str = \"\";\n    this.glasses.forEach((glass, index) => {\n      str += glass.toString();\n      if (index !== this.numberOfGlasses - 1) {\n        str += \"\\n\";\n      }\n    });\n    return str;\n  }\n\n  internalGetGlass(glassIndex) {\n    return this.glasses[glassIndex];\n  }\n\n  internalCalculateNumberOfColors() {\n    const colors = new Set();\n    this.glasses.forEach((glass) => {\n      const balls = glass.getAllBalls();\n      balls.forEach((ball) => colors.add(ball));\n    });\n    return colors.size;\n  }\n\n  internalFindAllGlassIndexesThatCanMoveToGlass(toIndex) {\n    const toGlass = this.internalGetGlass(toIndex);\n    return this.glasses\n      .map((fromGlass, fromIndex) => ({ fromGlass, fromIndex }))\n      .filter(({ fromIndex }) => fromIndex !== toIndex)\n      .filter(({ fromGlass }) => !fromGlass.isEmpty())\n      .filter(\n        ({ fromGlass }) =>\n          toGlass.isEmpty() || toGlass.top() === fromGlass.top()\n      )\n      .map(({ fromIndex }) => fromIndex);\n  }\n}\n\nexport default Board;\n","import autoBind from \"auto-bind\";\nimport Stack from \"./Stack\";\n\nclass DFS {\n  // startNode needs to implement AbstractGraphNode\n  constructor(startNode) {\n    this.visited = new Set();\n    this.visited.add(startNode.getHash());\n\n    this.stack = new Stack();\n    this.stack.push(startNode);\n\n    autoBind(this);\n  }\n\n  isDone() {\n    return this.stack.isEmpty();\n  }\n\n  currentNode() {\n    return this.stack.top();\n  }\n\n  iterate() {\n    const { stack, visited } = this;\n    const node = stack.pop();\n\n    const neighbors = node.getNeighbors();\n    neighbors.forEach((neighbor) => {\n      const neighborHash = neighbor.getHash();\n      if (!visited.has(neighborHash)) {\n        stack.push(neighbor);\n        visited.add(neighborHash);\n      }\n    });\n  }\n}\n\nexport default DFS;\n","import DFS from \"./DFS\";\nimport AbstractGraphNode from \"./AbstractGraphNode\";\n\nclass GraphNode extends AbstractGraphNode {\n  constructor(board, previousMove, previousNode) {\n    super();\n    this.board = board;\n    this.previousMove = previousMove;\n    this.previousNode = previousNode;\n  }\n\n  getHash() {\n    const glasses = this.board.getGlasses();\n    const glassStrings = glasses.map((glass) => glass.toString());\n    glassStrings.sort();\n    return glassStrings.join(\";\");\n  }\n\n  getNeighbors() {\n    const { board } = this;\n    const neighbors = board\n      .calculateAllPotentialMoves()\n      .filter((move) => !board.isGlassComplete(move.from))\n      .map((move) => {\n        const newBoard = board.clone();\n        newBoard.moveBall(move);\n        return new GraphNode(newBoard, move, this);\n      });\n    return neighbors;\n  }\n\n  getBoard() {\n    return this.board;\n  }\n\n  getMovesToNode() {\n    const moves = [];\n    if (this.previousNode !== null) {\n      moves.push(...this.previousNode.getMovesToNode());\n    }\n    if (this.previousMove !== null) {\n      moves.push(this.previousMove);\n    }\n    return moves;\n  }\n}\n\nfunction Solver(board) {\n  const startNode = new GraphNode(board, null, null);\n  const dfs = new DFS(startNode);\n\n  while (!dfs.isDone()) {\n    const currentNode = dfs.currentNode();\n\n    const isSolved = currentNode.getBoard().isComplete();\n    if (isSolved) {\n      const moves = currentNode.getMovesToNode();\n      return {\n        isSolvable: true,\n        moves,\n      };\n    }\n\n    dfs.iterate();\n  }\n\n  return {\n    isSolvable: false,\n    moves: [],\n  };\n}\n\nexport default Solver;\n","/* eslint-disable class-methods-use-this */\nclass AbstractGraphNode {\n  getHash() {\n    throw Error(\"Not implemented\");\n  }\n\n  getNeighbors() {\n    throw Error(\"Not implemented\");\n  }\n}\n\nexport default AbstractGraphNode;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Configurator from \"../Configurator/Configurator\";\nimport Solution from \"../Solution/Solution\";\nimport Glass from \"../../Solver/Glass\";\nimport Board from \"../../Solver/Board\";\nimport Solver from \"../../Solver/Solver\";\n\nconst STAGE_CONFIGURATION = \"configuration\";\nconst STAGE_SOLUTION = \"solution\";\n\nconst colorMap = {\n  RED: \"#c52b23\",\n  BLUE: \"#3b2fc3\",\n  PURPLE: \"#722b93\",\n  YELLOW: \"#f1da58\",\n  GREEN: \"#78970e\",\n  PINK: \"#ea5e7b\",\n  AQUA: \"#55a3e5\",\n  GREY: \"#636466\",\n  BABY: \"#61d67d\",\n  ORANGE: \"#e88c41\",\n};\n\nconst colors = Object.values(colorMap);\n\nfunction createGlass(arr) {\n  const glass = new Glass();\n  glass.pushArrayOfBalls(arr.map((idx) => colors[idx]));\n  return glass;\n}\n\nconst COMPLEX_BOARD = [\n  createGlass([0, 1, 0, 2]),\n  createGlass([1, 3, 4, 2]),\n  createGlass([5, 6, 4, 4]),\n  createGlass([7, 6, 3, 6]),\n  createGlass([8, 5, 7, 7]),\n  createGlass([0, 5, 5, 1]),\n  createGlass([3, 3, 2, 0]),\n  createGlass([4, 6, 8, 8]),\n  createGlass([7, 2, 8, 1]),\n  createGlass([]),\n  createGlass([]),\n];\n\nfunction cloneGlasses(glasses) {\n  return glasses.map((glass) => glass.clone());\n}\n\nfunction clearGlass(glasses, index) {\n  const clonedGlasses = cloneGlasses(glasses);\n  clonedGlasses.splice(index, 1, new Glass());\n  return clonedGlasses;\n}\n\nfunction addGlass(glasses, index) {\n  const clonedGlasses = cloneGlasses(glasses);\n  clonedGlasses.splice(index + 1, 0, new Glass());\n  return clonedGlasses;\n}\n\nfunction removeGlass(glasses, index) {\n  const clonedGlasses = cloneGlasses(glasses);\n  clonedGlasses.splice(index, 1);\n  if (clonedGlasses.length === 0) {\n    clonedGlasses.push(new Glass());\n  }\n  return clonedGlasses;\n}\n\nfunction addBallToGlass(glasses, index, color) {\n  const clonedGlasses = cloneGlasses(glasses);\n  const glass = clonedGlasses[index];\n  if (!glass.isFull()) {\n    glass.push(color);\n  }\n  return clonedGlasses;\n}\n\nfunction App() {\n  const [activeGlass, setActiveGlass] = useState(0);\n  const [stage, setStage] = useState(STAGE_CONFIGURATION);\n  const [moves, setMoves] = useState([]);\n  const [moveIndex, setMoveIndex] = useState(0);\n  const [solutionGlasses, setSolutionGlasses] = useState([]);\n  const [glasses, setGlasses] = useState(COMPLEX_BOARD);\n\n  const onClearHandler = () => {\n    setGlasses(clearGlass(glasses, activeGlass));\n  };\n\n  const onAddHandler = () => {\n    setGlasses(addGlass(glasses, activeGlass));\n    setActiveGlass(activeGlass + 1);\n  };\n\n  const onRemoveHandler = () => {\n    setGlasses(removeGlass(glasses, activeGlass));\n    setActiveGlass(Math.max(activeGlass - 1, 0));\n  };\n\n  const onColorClickHandler = (color) => {\n    setGlasses(addBallToGlass(glasses, activeGlass, color));\n  };\n\n  const onTestTubeClickHandler = (index) => {\n    setActiveGlass(index);\n  };\n\n  const onSolveHandler = () => {\n    const board = new Board(glasses);\n    const report = Solver(board);\n    if (!report.isSolvable) {\n      throw Error(\"Board not solvable\");\n    }\n    setMoveIndex(0);\n    setMoves(report.moves);\n    setSolutionGlasses(cloneGlasses(glasses));\n    setStage(STAGE_SOLUTION);\n  };\n\n  const onNextHandler = () => {\n    const move = moves[moveIndex];\n    const board = new Board(solutionGlasses);\n    board.moveBall(move);\n    setSolutionGlasses(board.getGlasses());\n    setMoveIndex(moveIndex + 1);\n  };\n\n  const onPreviousHandler = () => {\n    const move = moves[moveIndex - 1];\n    const board = new Board(solutionGlasses);\n    board.moveBall(move.invert());\n    setSolutionGlasses(board.getGlasses());\n    setMoveIndex(moveIndex - 1);\n  };\n\n  const onRestartHandler = () => {\n    setStage(STAGE_CONFIGURATION);\n  };\n\n  return (\n    <div className=\"App\">\n      {stage === STAGE_CONFIGURATION ? (\n        <Configurator\n          colors={colors}\n          glasses={glasses}\n          activeGlass={activeGlass}\n          onTestTubeClick={onTestTubeClickHandler}\n          onClear={onClearHandler}\n          onAdd={onAddHandler}\n          onRemove={onRemoveHandler}\n          onColorClick={onColorClickHandler}\n          onSolve={onSolveHandler}\n        />\n      ) : (\n        <Solution\n          glasses={solutionGlasses}\n          moves={moves}\n          moveIndex={moveIndex}\n          onNext={onNextHandler}\n          onPrevious={onPreviousHandler}\n          onRestart={onRestartHandler}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}